// –ü–†–û–î–ê–ö–®–ï–ù BACKEND: Solana –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
// =========================================================

const { Connection, PublicKey, Keypair, SystemProgram } = require('@solana/web3.js');
const { Program, AnchorProvider } = require('@coral-xyz/anchor');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SOLANA_CONFIG = {
  rpcUrl: process.env.SOLANA_RPC_URL || 'https://api.devnet.solana.com',
  network: process.env.SOLANA_NETWORK || 'devnet',
  programId: new PublicKey(process.env.ANCHOR_PROGRAM_ID || '11111111111111111111111111111111'),
  wallet: null, // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
  commitment: 'confirmed'
};

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
const connection = new Connection(SOLANA_CONFIG.rpcUrl, SOLANA_CONFIG.commitment);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª–µ–∫
let wallet;
try {
  const walletPath = process.env.SOLANA_WALLET_PATH || path.join(process.env.HOME, '.config/solana/id.json');
  const walletData = JSON.parse(fs.readFileSync(walletPath, 'utf8'));
  wallet = Keypair.fromSecretKey(new Uint8Array(walletData));
  SOLANA_CONFIG.wallet = wallet.publicKey;
  console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω:', wallet.publicKey.toString());
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞:', error.message);
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
const provider = new AnchorProvider(connection, wallet, {
  commitment: SOLANA_CONFIG.commitment,
  preflightCommitment: SOLANA_CONFIG.commitment
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º IDL
let idl;
try {
  const idlPath = path.join(__dirname, '../../../target/idl/asset_tokenization.json');
  idl = JSON.parse(fs.readFileSync(idlPath, 'utf8'));
  console.log('‚úÖ IDL –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ IDL:', error.message);
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
const program = new Program(idl, SOLANA_CONFIG.programId, provider);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDA
const generatePDAs = (assetId) => {
  const [assetPda] = PublicKey.findProgramAddressSync(
    [
      Buffer.from("asset"), 
      Buffer.from(assetId.toString().padStart(16, '0'), 'hex')
    ],
    SOLANA_CONFIG.programId
  );
  
  const [escrowPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("escrow"), assetPda.toBytes()],
    SOLANA_CONFIG.programId
  );
  
  const [revenuePoolPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("revenue_pool"), assetPda.toBytes()],
    SOLANA_CONFIG.programId
  );

  return {
    asset: assetPda,
    escrow: escrowPda,
    revenuePool: revenuePoolPda
  };
};

// –†–µ–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
const solanaService = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async checkConnection() {
    try {
      const version = await connection.getVersion();
      const balance = await connection.getBalance(wallet.publicKey);
      return {
        success: true,
        version: version,
        balance: balance / 1e9,
        wallet: wallet.publicKey.toString()
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
  async createAsset(assetId, metadataUri, totalSupply, creator) {
    try {
      console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞ ${assetId}...`);
      
      const pdas = generatePDAs(assetId);
      const creatorPubkey = new PublicKey(creator);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–∞ –µ—â–µ –Ω–µ—Ç
      try {
        await program.account.asset.fetch(pdas.asset);
        return {
          success: false,
          error: 'Asset already exists'
        };
      } catch (error) {
        // –ê–∫—Ç–∏–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
      
      const tx = await program.methods
        .createAsset(assetId, metadataUri, totalSupply)
        .accounts({
          asset: pdas.asset,
          creator: creatorPubkey,
          systemProgram: SystemProgram.programId,
        })
        .rpc();
        
      console.log(`‚úÖ –ê–∫—Ç–∏–≤ ${assetId} —Å–æ–∑–¥–∞–Ω, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${tx}`);
      
      return {
        success: true,
        transaction: tx,
        assetPda: pdas.asset.toString(),
        escrowPda: pdas.escrow.toString(),
        revenuePoolPda: pdas.revenuePool.toString()
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞:', error);
      return {
        success: false,
        error: error.message
      };
    }
  },

  // –ú–∏–Ω—Ç–∏–Ω–≥ —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  async mintFractionTokens(assetId, amount, creator) {
    try {
      console.log(`ü™ô –ú–∏–Ω—Ç–∏–Ω–≥ ${amount} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞ ${assetId}...`);
      
      const pdas = generatePDAs(assetId);
      const creatorPubkey = new PublicKey(creator);
      
      const tx = await program.methods
        .mintFractionTokens(amount)
        .accounts({
          asset: pdas.asset,
          escrow: pdas.escrow,
          creator: creatorPubkey,
          systemProgram: SystemProgram.programId,
        })
        .rpc();
        
      console.log(`‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–º–∏–Ω—á–µ–Ω—ã, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${tx}`);
      
      return {
        success: true,
        transaction: tx
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–Ω—Ç–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return {
        success: false,
        error: error.message
      };
    }
  },

  // –ü–æ–∫—É–ø–∫–∞ —Ñ—Ä–∞–∫—Ü–∏–π
  async buyFractions(assetId, amount, buyer) {
    try {
      console.log(`üí∞ –ü–æ–∫—É–ø–∫–∞ ${amount} —Ñ—Ä–∞–∫—Ü–∏–π –∞–∫—Ç–∏–≤–∞ ${assetId}...`);
      
      const pdas = generatePDAs(assetId);
      const buyerPubkey = new PublicKey(buyer);
      
      const tx = await program.methods
        .buyFractions(amount)
        .accounts({
          asset: pdas.asset,
          escrow: pdas.escrow,
          buyer: buyerPubkey,
          systemProgram: SystemProgram.programId,
        })
        .rpc();
        
      console.log(`‚úÖ –§—Ä–∞–∫—Ü–∏–∏ –∫—É–ø–ª–µ–Ω—ã, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${tx}`);
      
      return {
        success: true,
        transaction: tx
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ñ—Ä–∞–∫—Ü–∏–π:', error);
      return {
        success: false,
        error: error.message
      };
    }
  },

  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
  async distributeRevenue(assetId, amount, creator) {
    try {
      console.log(`üí∏ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ${amount} –¥–æ—Ö–æ–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞ ${assetId}...`);
      
      const pdas = generatePDAs(assetId);
      const creatorPubkey = new PublicKey(creator);
      
      const tx = await program.methods
        .distributeRevenue(amount)
        .accounts({
          asset: pdas.asset,
          revenuePool: pdas.revenuePool,
          creator: creatorPubkey,
          systemProgram: SystemProgram.programId,
        })
        .rpc();
        
      console.log(`‚úÖ –î–æ—Ö–æ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${tx}`);
      
      return {
        success: true,
        transaction: tx
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞:', error);
      return {
        success: false,
        error: error.message
      };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–µ
  async getAssetInfo(assetId) {
    try {
      const pdas = generatePDAs(assetId);
      const assetAccount = await program.account.asset.fetch(pdas.asset);
      
      return {
        success: true,
        asset: {
          id: assetAccount.id.toString(),
          creator: assetAccount.creator.toString(),
          metadataUri: assetAccount.metadataUri,
          totalSupply: assetAccount.totalSupply.toString(),
          remainingSupply: assetAccount.remainingSupply.toString(),
          bump: assetAccount.bump
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Å–∫—Ä–æ—É
  async getEscrowInfo(assetId) {
    try {
      const pdas = generatePDAs(assetId);
      const escrowAccount = await program.account.escrow.fetch(pdas.escrow);
      
      return {
        success: true,
        escrow: {
          assetId: escrowAccount.assetId.toString(),
          totalAmount: escrowAccount.totalAmount.toString(),
          availableAmount: escrowAccount.availableAmount.toString()
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–µ –¥–æ—Ö–æ–¥–∞
  async getRevenuePoolInfo(assetId) {
    try {
      const pdas = generatePDAs(assetId);
      const revenuePoolAccount = await program.account.revenuePool.fetch(pdas.revenuePool);
      
      return {
        success: true,
        revenuePool: {
          assetId: revenuePoolAccount.assetId.toString(),
          totalRevenue: revenuePoolAccount.totalRevenue.toString(),
          distributedRevenue: revenuePoolAccount.distributedRevenue.toString()
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
  async getAllAssets() {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      return {
        success: true,
        assets: []
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
};

module.exports = {
  SOLANA_CONFIG,
  connection,
  program,
  provider,
  wallet,
  generatePDAs,
  solanaService
};
