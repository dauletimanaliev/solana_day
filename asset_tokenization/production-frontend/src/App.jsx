// –ü–†–û–î–ê–ö–®–ï–ù FRONTEND - Asset Tokenization Platform
// ================================================

import React, { useState, useEffect } from 'react';
import { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';
import { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui';
import { PhantomWalletAdapter } from '@solana/wallet-adapter-phantom';
import { PublicKey } from '@solana/web3.js';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ)
// import AssetCreationWizard from './components/AssetCreationWizard';
// import RevenueDistribution from './components/RevenueDistribution';
// import PortfolioAnalytics from './components/PortfolioAnalytics';
import AssetList from './components/AssetList';
import TransactionHistory from './components/TransactionHistory';

// –°—Ç–∏–ª–∏
import '@solana/wallet-adapter-react-ui/styles.css';
import './App.css';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const NETWORK = 'devnet';
const RPC_URL = 'https://api.devnet.solana.com';
const API_BASE_URL = 'http://localhost:3001';

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏
const wallets = [new PhantomWalletAdapter()];

function App() {
  const [currentView, setCurrentView] = useState('dashboard');
  const [wallet, setWallet] = useState(null);
  const [apiStatus, setApiStatus] = useState('checking');
  const [assets, setAssets] = useState([]);
  const [transactions, setTransactions] = useState([]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
  useEffect(() => {
    checkApiStatus();
  }, []);

  const checkApiStatus = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/health`);
      const data = await response.json();
      
      if (data.status === 'healthy') {
        setApiStatus('connected');
        console.log('‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω:', data);
      } else {
        setApiStatus('error');
        console.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', data);
      }
    } catch (error) {
      setApiStatus('error');
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error);
    }
  };

  const loadAssets = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/api/assets`);
      const data = await response.json();
      
      if (data.success) {
        setAssets(data.data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–æ–≤:', error);
    }
  };

  const loadTransactions = async () => {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
      setTransactions([]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    }
  };

  const handleWalletConnect = (wallet) => {
    setWallet(wallet);
    console.log('–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', wallet.publicKey?.toString());
  };

  const handleAssetCreated = (asset) => {
    console.log('–ê–∫—Ç–∏–≤ —Å–æ–∑–¥–∞–Ω:', asset);
    loadAssets(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤
  };

  const renderView = () => {
    switch (currentView) {
      case 'create':
        return (
          <div className="dashboard">
            <h2>–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞</h2>
            <p>–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏</p>
            <button onClick={() => setCurrentView('dashboard')} className="btn">
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—à–±–æ—Ä–¥—É
            </button>
          </div>
        );
      case 'revenue':
        return (
          <div className="dashboard">
            <h2>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞</h2>
            <p>–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏</p>
            <button onClick={() => setCurrentView('dashboard')} className="btn">
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—à–±–æ—Ä–¥—É
            </button>
          </div>
        );
      case 'analytics':
        return (
          <div className="dashboard">
            <h2>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
            <p>–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏</p>
            <button onClick={() => setCurrentView('dashboard')} className="btn">
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—à–±–æ—Ä–¥—É
            </button>
          </div>
        );
      case 'assets':
        return <AssetList assets={assets} onLoadAssets={loadAssets} />;
      case 'transactions':
        return <TransactionHistory transactions={transactions} onLoadTransactions={loadTransactions} />;
      default:
        return (
          <div className="dashboard">
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Asset Tokenization Platform</h2>
            <div className="dashboard-grid">
              <div className="dashboard-card" onClick={() => setCurrentView('create')}>
                <h3>–°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤</h3>
                <p>–¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –≤–∞—à –∞–∫—Ç–∏–≤ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ Solana</p>
              </div>
              <div className="dashboard-card" onClick={() => setCurrentView('revenue')}>
                <h3>–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Ö–æ–¥</h3>
                <p>–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –¥–æ—Ö–æ–¥ –º–µ–∂–¥—É –¥–µ—Ä–∂–∞—Ç–µ–ª—è–º–∏ —Ç–æ–∫–µ–Ω–æ–≤</p>
              </div>
              <div className="dashboard-card" onClick={() => setCurrentView('analytics')}>
                <h3>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
                <p>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è</p>
              </div>
              <div className="dashboard-card" onClick={() => setCurrentView('assets')}>
                <h3>–ú–æ–∏ –∞–∫—Ç–∏–≤—ã</h3>
                <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏</p>
              </div>
            </div>
          </div>
        );
    }
  };

  return (
    <ConnectionProvider endpoint={RPC_URL}>
      <WalletProvider wallets={wallets}>
        <WalletModalProvider>
          <div className="app">
            <header className="app-header">
              <div className="header-content">
                <h1>üöÄ Asset Tokenization Platform</h1>
                <div className="header-controls">
                  <div className={`api-status ${apiStatus}`}>
                    {apiStatus === 'connected' && '‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω'}
                    {apiStatus === 'checking' && 'üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ API...'}
                    {apiStatus === 'error' && '‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                  </div>
                  <WalletMultiButton />
                </div>
              </div>
            </header>

            <nav className="app-nav">
              <button 
                className={currentView === 'dashboard' ? 'active' : ''}
                onClick={() => setCurrentView('dashboard')}
              >
                üè† –î–∞—à–±–æ—Ä–¥
              </button>
              <button 
                className={currentView === 'create' ? 'active' : ''}
                onClick={() => setCurrentView('create')}
              >
                ‚ûï –°–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤
              </button>
              <button 
                className={currentView === 'revenue' ? 'active' : ''}
                onClick={() => setCurrentView('revenue')}
              >
                üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ—Ö–æ–¥
              </button>
              <button 
                className={currentView === 'analytics' ? 'active' : ''}
                onClick={() => setCurrentView('analytics')}
              >
                üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
              </button>
              <button 
                className={currentView === 'assets' ? 'active' : ''}
                onClick={() => setCurrentView('assets')}
              >
                üìã –ú–æ–∏ –∞–∫—Ç–∏–≤—ã
              </button>
              <button 
                className={currentView === 'transactions' ? 'active' : ''}
                onClick={() => setCurrentView('transactions')}
              >
                üìú –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
              </button>
            </nav>

            <main className="app-main">
              {renderView()}
            </main>

            <footer className="app-footer">
              <p>Asset Tokenization Platform - Powered by Solana Blockchain</p>
              <p>Network: {NETWORK} | API: {API_BASE_URL}</p>
            </footer>
          </div>
        </WalletModalProvider>
      </WalletProvider>
    </ConnectionProvider>
  );
}

export default App;
