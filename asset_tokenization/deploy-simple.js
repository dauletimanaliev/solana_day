// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –±–µ–∑ Anchor
// =================================

const { Connection, PublicKey, Keypair, SystemProgram } = require('@solana/web3.js');
const fs = require('fs');

async function deployProgram() {
  console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π Asset Tokenization Program");
  console.log("=============================================");

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet
    const connection = new Connection('https://api.devnet.solana.com', 'confirmed');
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª–µ–∫
    const walletPath = process.env.HOME + '/.config/solana/id.json';
    const walletData = JSON.parse(fs.readFileSync(walletPath, 'utf8'));
    const wallet = Keypair.fromSecretKey(new Uint8Array(walletData));
    console.log("‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω:", wallet.publicKey.toString());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const balance = await connection.getBalance(wallet.publicKey);
    console.log("üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:", balance / 1e9, "SOL");

    if (balance < 0.1e9) {
      console.log("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è –¥–µ–ø–ª–æ—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º airdrop...");
      const airdropSignature = await connection.requestAirdrop(wallet.publicKey, 2e9);
      await connection.confirmTransaction(airdropSignature);
      console.log("‚úÖ Airdrop –ø–æ–ª—É—á–µ–Ω");
    }

    // Program ID (—É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ lib.rs)
    const programId = new PublicKey("FuAVoPCtaJWnJZVxE2ii4CtiqPwgvmxLE7gkGv5udmjQ");
    console.log("üìã Program ID:", programId.toString());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞
    const programInfo = await connection.getAccountInfo(programId);
    
    if (programInfo) {
      console.log("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ");
      console.log("   Owner:", programInfo.owner.toString());
      console.log("   Executable:", programInfo.executable);
      console.log("   Data Length:", programInfo.data.length, "bytes");
    } else {
      console.log("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ");
      console.log("   –ù—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –∏ –¥–µ–ø–ª–æ–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É");
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º PDA –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    console.log("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º PDA –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:");
    
    const testAssetId = 12345;
    const [assetPda] = PublicKey.findProgramAddressSync(
      [
        Buffer.from("asset"), 
        Buffer.from(testAssetId.toString().padStart(16, '0'), 'hex')
      ],
      programId
    );
    
    const [escrowPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("escrow"), assetPda.toBytes()],
      programId
    );
    
    const [revenuePoolPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("revenue_pool"), assetPda.toBytes()],
      programId
    );

    console.log("‚úÖ Asset PDA:", assetPda.toString());
    console.log("‚úÖ Escrow PDA:", escrowPda.toString());
    console.log("‚úÖ Revenue Pool PDA:", revenuePoolPda.toString());

    // –°–æ–∑–¥–∞–µ–º IDL —Ñ–∞–π–ª –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const idl = {
      "version": "0.1.0",
      "name": "asset_tokenization",
      "instructions": [
        {
          "name": "createAsset",
          "accounts": [
            { "name": "asset", "isMut": true, "isSigner": false },
            { "name": "creator", "isMut": true, "isSigner": true },
            { "name": "systemProgram", "isMut": false, "isSigner": false }
          ],
          "args": [
            { "name": "assetId", "type": "u64" },
            { "name": "metadataUri", "type": "string" },
            { "name": "totalSupply", "type": "u64" }
          ]
        },
        {
          "name": "mintFractionTokens",
          "accounts": [
            { "name": "asset", "isMut": true, "isSigner": false },
            { "name": "escrow", "isMut": true, "isSigner": false },
            { "name": "creator", "isMut": true, "isSigner": true },
            { "name": "systemProgram", "isMut": false, "isSigner": false }
          ],
          "args": [
            { "name": "amount", "type": "u64" }
          ]
        },
        {
          "name": "buyFractions",
          "accounts": [
            { "name": "asset", "isMut": true, "isSigner": false },
            { "name": "escrow", "isMut": true, "isSigner": false },
            { "name": "buyer", "isMut": true, "isSigner": true },
            { "name": "systemProgram", "isMut": false, "isSigner": false }
          ],
          "args": [
            { "name": "amount", "type": "u64" }
          ]
        },
        {
          "name": "distributeRevenue",
          "accounts": [
            { "name": "asset", "isMut": true, "isSigner": false },
            { "name": "revenuePool", "isMut": true, "isSigner": false },
            { "name": "creator", "isMut": true, "isSigner": true },
            { "name": "systemProgram", "isMut": false, "isSigner": false }
          ],
          "args": [
            { "name": "amount", "type": "u64" }
          ]
        }
      ],
      "accounts": [
        {
          "name": "Asset",
          "type": {
            "kind": "struct",
            "fields": [
              { "name": "id", "type": "u64" },
              { "name": "creator", "type": "publicKey" },
              { "name": "metadataUri", "type": "string" },
              { "name": "totalSupply", "type": "u64" },
              { "name": "remainingSupply", "type": "u64" },
              { "name": "bump", "type": "u8" }
            ]
          }
        },
        {
          "name": "Escrow",
          "type": {
            "kind": "struct",
            "fields": [
              { "name": "assetId", "type": "u64" },
              { "name": "totalAmount", "type": "u64" },
              { "name": "availableAmount", "type": "u64" }
            ]
          }
        },
        {
          "name": "RevenuePool",
          "type": {
            "kind": "struct",
            "fields": [
              { "name": "assetId", "type": "u64" },
              { "name": "totalRevenue", "type": "u64" },
              { "name": "distributedRevenue", "type": "u64" }
            ]
          }
        }
      ],
      "errors": [
        { "code": 6000, "name": "InsufficientSupply", "msg": "Insufficient supply for minting" },
        { "code": 6001, "name": "InsufficientTokenBalance", "msg": "Insufficient token balance in escrow" },
        { "code": 6002, "name": "InvalidAmount", "msg": "Invalid amount" },
        { "code": 6003, "name": "Unauthorized", "msg": "Unauthorized access" }
      ]
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º IDL
    fs.writeFileSync('./target/idl/asset_tokenization.json', JSON.stringify(idl, null, 2));
    console.log("‚úÖ IDL —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ./target/idl/asset_tokenization.json");

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const config = {
      programId: programId.toString(),
      network: "devnet",
      rpcUrl: "https://api.devnet.solana.com",
      wallet: wallet.publicKey.toString(),
      pdas: {
        asset: assetPda.toString(),
        escrow: escrowPda.toString(),
        revenuePool: revenuePoolPda.toString()
      },
      status: programInfo ? "deployed" : "needs_deployment"
    };

    fs.writeFileSync('./deployment-config.json', JSON.stringify(config, null, 2));
    console.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–ø–ª–æ—è —Å–æ–∑–¥–∞–Ω–∞: ./deployment-config.json");

    console.log("\nüéØ –°–¢–ê–¢–£–° –î–ï–ü–õ–û–Ø:");
    console.log("==================");
    console.log("‚úÖ Program ID:", programId.toString());
    console.log("‚úÖ Network: devnet");
    console.log("‚úÖ RPC URL: https://api.devnet.solana.com");
    console.log("‚úÖ Wallet:", wallet.publicKey.toString());
    console.log("‚úÖ PDA –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç");
    console.log("‚úÖ IDL —Ñ–∞–π–ª: —Å–æ–∑–¥–∞–Ω");
    console.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –≥–æ—Ç–æ–≤–∞");

    if (programInfo) {
      console.log("\nüéâ –ü–†–û–ì–†–ê–ú–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!");
      console.log("   Frontend/Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é");
    } else {
      console.log("\n‚ö†Ô∏è –ü–†–û–ì–†–ê–ú–ú–ê –ù–£–ñ–î–ê–ï–¢–°–Ø –í –î–ï–ü–õ–û–ï");
      console.log("   –ù—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å .so —Ñ–∞–π–ª –∏ –∑–∞–¥–µ–ø–ª–æ–∏—Ç—å —á–µ—Ä–µ–∑ Solana CLI");
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:", error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–ø–ª–æ–π
deployProgram();
