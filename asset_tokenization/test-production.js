// –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ï–ù –í–ï–†–°–ò–ò —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
// =========================================

const { Connection, PublicKey, Keypair } = require('@solana/web3.js');
const fs = require('fs');

async function testProduction() {
  console.log("üöÄ –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ï–ù –í–ï–†–°–ò–ò");
  console.log("=========================");

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = JSON.parse(fs.readFileSync('./final-deployment-config.json', 'utf8'));
    console.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet
    const connection = new Connection(config.rpcUrl, 'confirmed');
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª–µ–∫
    const walletPath = process.env.HOME + '/.config/solana/id.json';
    const walletData = JSON.parse(fs.readFileSync(walletPath, 'utf8'));
    const wallet = Keypair.fromSecretKey(new Uint8Array(walletData));
    console.log("‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω:", wallet.publicKey.toString());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const balance = await connection.getBalance(wallet.publicKey);
    console.log("üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:", balance / 1e9, "SOL");

    if (balance < 0.1e9) {
      console.log("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º airdrop...");
      const airdropSignature = await connection.requestAirdrop(wallet.publicKey, 2e9);
      await connection.confirmTransaction(airdropSignature);
      console.log("‚úÖ Airdrop –ø–æ–ª—É—á–µ–Ω");
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    console.log("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:");

    // 1. Health check
    console.log("1. Health check...");
    try {
      const healthResponse = await fetch('http://localhost:3001/health');
      const healthData = await healthResponse.json();
      console.log("   ‚úÖ Health check:", healthData.status);
      console.log("   üìä Solana info:", JSON.stringify(healthData.solana, null, 2));
    } catch (error) {
      console.log("   ‚ùå Health check failed:", error.message);
      console.log("   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Å–µ—Ä–≤–µ—Ä: cd production-backend && npm start");
      return;
    }

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞
    console.log("2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞...");
    try {
      const createAssetData = {
        assetId: 88888,
        metadataUri: "https://example.com/metadata/88888.json",
        totalSupply: 1000000,
        creator: wallet.publicKey.toString()
      };

      const createResponse = await fetch('http://localhost:3001/api/assets/create_asset', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(createAssetData)
      });

      const createResult = await createResponse.json();
      if (createResult.success) {
        console.log("   ‚úÖ Asset created:", createResult.data.assetId);
        console.log("   üìã Transaction:", createResult.data.transaction);
        console.log("   üîó Explorer:", createResult.data.explorer);
      } else {
        console.log("   ‚ùå Asset creation failed:", createResult.error);
      }
    } catch (error) {
      console.log("   ‚ùå Asset creation error:", error.message);
    }

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–µ
    console.log("3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–µ...");
    try {
      const getAssetResponse = await fetch('http://localhost:3001/api/assets/88888');
      const getAssetResult = await getAssetResponse.json();
      if (getAssetResult.success) {
        console.log("   ‚úÖ Asset info retrieved");
        console.log("   üìã Asset data:", JSON.stringify(getAssetResult.data, null, 2));
      } else {
        console.log("   ‚ùå Asset info failed:", getAssetResult.error);
      }
    } catch (error) {
      console.log("   ‚ùå Asset info error:", error.message);
    }

    // 4. –ú–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤
    console.log("4. –ú–∏–Ω—Ç–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤...");
    try {
      const mintData = {
        assetId: 88888,
        amount: 100000,
        creator: wallet.publicKey.toString()
      };

      const mintResponse = await fetch('http://localhost:3001/api/assets/mint_fraction', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(mintData)
      });

      const mintResult = await mintResponse.json();
      if (mintResult.success) {
        console.log("   ‚úÖ Tokens minted:", mintResult.data.amount);
        console.log("   üìã Transaction:", mintResult.data.transaction);
        console.log("   üîó Explorer:", mintResult.data.explorer);
      } else {
        console.log("   ‚ùå Token minting failed:", mintResult.error);
      }
    } catch (error) {
      console.log("   ‚ùå Token minting error:", error.message);
    }

    // 5. –ü–æ–∫—É–ø–∫–∞ —Ñ—Ä–∞–∫—Ü–∏–π
    console.log("5. –ü–æ–∫—É–ø–∫–∞ —Ñ—Ä–∞–∫—Ü–∏–π...");
    try {
      const buyData = {
        assetId: 88888,
        amount: 1000,
        buyer: wallet.publicKey.toString()
      };

      const buyResponse = await fetch('http://localhost:3001/api/transactions/buy_fraction', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(buyData)
      });

      const buyResult = await buyResponse.json();
      if (buyResult.success) {
        console.log("   ‚úÖ Fractions purchased:", buyResult.data.amount);
        console.log("   üìã Transaction:", buyResult.data.transaction);
        console.log("   üîó Explorer:", buyResult.data.explorer);
      } else {
        console.log("   ‚ùå Fraction purchase failed:", buyResult.error);
      }
    } catch (error) {
      console.log("   ‚ùå Fraction purchase error:", error.message);
    }

    // 6. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
    console.log("6. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞...");
    try {
      const distributeData = {
        assetId: 88888,
        amount: 1000,
        creator: wallet.publicKey.toString()
      };

      const distributeResponse = await fetch('http://localhost:3001/api/transactions/distribute_revenue', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(distributeData)
      });

      const distributeResult = await distributeResponse.json();
      if (distributeResult.success) {
        console.log("   ‚úÖ Revenue distributed:", distributeResult.data.amount);
        console.log("   üìã Transaction:", distributeResult.data.transaction);
        console.log("   üîó Explorer:", distributeResult.data.explorer);
      } else {
        console.log("   ‚ùå Revenue distribution failed:", distributeResult.error);
      }
    } catch (error) {
      console.log("   ‚ùå Revenue distribution error:", error.message);
    }

    console.log("\nüéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:");
    console.log("=======================");
    console.log("‚úÖ –ü—Ä–æ–¥–∞–∫—à–µ–Ω API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    console.log("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º Solana —Ä–∞–±–æ—Ç–∞–µ—Ç");
    console.log("‚úÖ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ");
    console.log("‚úÖ Explorer —Å—Å—ã–ª–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è");
    console.log("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è");

    console.log("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:");
    console.log("===================");
    console.log("1. –î–µ–ø–ª–æ–π —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ mainnet");
    console.log("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è");
    console.log("3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö");
    console.log("4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD");
    console.log("5. –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testProduction();
