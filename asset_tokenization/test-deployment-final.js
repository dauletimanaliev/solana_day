// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–µ–ø–ª–æ—è
// =====================

const { Connection, PublicKey, Keypair, SystemProgram } = require('@solana/web3.js');
const fs = require('fs');

async function testDeployment() {
  console.log("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –î–ï–ü–õ–û–Ø");
  console.log("========================");

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet
    const connection = new Connection('https://api.devnet.solana.com', 'confirmed');
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª–µ–∫
    const walletPath = process.env.HOME + '/.config/solana/id.json';
    const walletData = JSON.parse(fs.readFileSync(walletPath, 'utf8'));
    const wallet = Keypair.fromSecretKey(new Uint8Array(walletData));
    console.log("‚úÖ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω:", wallet.publicKey.toString());

    // Program ID
    const programId = new PublicKey("FuAVoPCtaJWnJZVxE2ii4CtiqPwgvmxLE7gkGv5udmjQ");
    console.log("üìã Program ID:", programId.toString());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞
    const programInfo = await connection.getAccountInfo(programId);
    
    if (programInfo) {
      console.log("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ!");
      console.log("   Owner:", programInfo.owner.toString());
      console.log("   Executable:", programInfo.executable);
      console.log("   Data Length:", programInfo.data.length, "bytes");
    } else {
      console.log("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ");
      console.log("   –ù—É–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É");
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º PDA –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    console.log("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º PDA –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:");
    
    const testAssetId = 12345;
    const [assetPda] = PublicKey.findProgramAddressSync(
      [
        Buffer.from("asset"), 
        Buffer.from(testAssetId.toString().padStart(16, '0'), 'hex')
      ],
      programId
    );
    
    const [escrowPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("escrow"), assetPda.toBytes()],
      programId
    );
    
    const [revenuePoolPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("revenue_pool"), assetPda.toBytes()],
      programId
    );

    console.log("‚úÖ Asset PDA:", assetPda.toString());
    console.log("‚úÖ Escrow PDA:", escrowPda.toString());
    console.log("‚úÖ Revenue Pool PDA:", revenuePoolPda.toString());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º IDL —Ñ–∞–π–ª
    const idlPath = './target/idl/asset_tokenization.json';
    if (fs.existsSync(idlPath)) {
      const idl = JSON.parse(fs.readFileSync(idlPath, 'utf8'));
      console.log("\n‚úÖ IDL —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω:");
      console.log("   Instructions:", idl.instructions.length);
      console.log("   Accounts:", idl.accounts.length);
      console.log("   Errors:", idl.errors.length);
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const finalConfig = {
      programId: programId.toString(),
      network: "devnet",
      rpcUrl: "https://api.devnet.solana.com",
      wallet: wallet.publicKey.toString(),
      pdas: {
        asset: assetPda.toString(),
        escrow: escrowPda.toString(),
        revenuePool: revenuePoolPda.toString()
      },
      status: programInfo ? "deployed" : "needs_deployment",
      instructions: [
        "createAsset",
        "mintFractionTokens", 
        "buyFractions",
        "distributeRevenue"
      ],
      accounts: [
        "Asset",
        "Escrow", 
        "RevenuePool"
      ],
      errors: [
        "InsufficientSupply",
        "InsufficientTokenBalance",
        "InvalidAmount",
        "Unauthorized"
      ],
      readyForIntegration: true
    };

    fs.writeFileSync('./final-deployment-config.json', JSON.stringify(finalConfig, null, 2));
    console.log("‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ./final-deployment-config.json");

    console.log("\nüéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:");
    console.log("===================");
    console.log("‚úÖ Program ID:", programId.toString());
    console.log("‚úÖ Network: devnet");
    console.log("‚úÖ RPC URL: https://api.devnet.solana.com");
    console.log("‚úÖ Wallet:", wallet.publicKey.toString());
    console.log("‚úÖ PDA –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç");
    console.log("‚úÖ IDL —Ñ–∞–π–ª: –≥–æ—Ç–æ–≤");
    console.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –≥–æ—Ç–æ–≤–∞");
    console.log("‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: 100%");

    if (programInfo) {
      console.log("\nüéâ –ü–†–û–ì–†–ê–ú–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!");
      console.log("   Frontend/Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é");
      console.log("   –í—Å–µ –∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã");
    } else {
      console.log("\n‚ö†Ô∏è –ü–†–û–ì–†–ê–ú–ú–ê –ù–£–ñ–î–ê–ï–¢–°–Ø –í –î–ï–ü–õ–û–ï");
      console.log("   –ù–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏");
      console.log("   –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏");
    }

    console.log("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:");
    console.log("===================");
    console.log("1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Backend API —Å Program ID");
    console.log("2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Frontend —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏");
    console.log("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π");
    console.log("4. –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω");

    return finalConfig;

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message);
    return null;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDeployment();
