// BLOCKCHAIN DEVELOPER: –¢–µ—Å—Ç –¥–µ–ø–ª–æ—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
// ===========================================

const { Connection, PublicKey, Keypair } = require('@solana/web3.js');
const { Program, AnchorProvider, Wallet } = require('@coral-xyz/anchor');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PROGRAM_ID = "FuAVoPCtaJWnJZVxE2ii4CtiqPwgvmxLE7gkGv5udmjQ";
const NETWORK = "https://api.devnet.solana.com";

async function testDeployment() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–ø–ª–æ—è Asset Tokenization Program");
  console.log("=================================================");
  
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
    const connection = new Connection(NETWORK, 'confirmed');
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${NETWORK} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Program ID
    const programId = new PublicKey(PROGRAM_ID);
    console.log(`‚úÖ Program ID: ${programId.toString()}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
    const programInfo = await connection.getAccountInfo(programId);
    
    if (programInfo) {
      console.log("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ");
      console.log(`   Owner: ${programInfo.owner.toString()}`);
      console.log(`   Executable: ${programInfo.executable}`);
      console.log(`   Data Length: ${programInfo.data.length} bytes`);
    } else {
      console.log("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ");
      console.log("   –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π:");
      console.log("   anchor deploy --provider.cluster devnet");
      return;
    }
    
    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDA
    console.log("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDA –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:");
    
    const testAssetId = 12345;
    const [assetPda] = PublicKey.findProgramAddressSync(
      [
        Buffer.from("asset"), 
        Buffer.from(testAssetId.toString().padStart(16, '0'), 'hex')
      ],
      programId
    );
    
    const [escrowPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("escrow"), assetPda.toBytes()],
      programId
    );
    
    const [revenuePoolPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("revenue_pool"), assetPda.toBytes()],
      programId
    );
    
    console.log(`‚úÖ Asset PDA: ${assetPda.toString()}`);
    console.log(`‚úÖ Escrow PDA: ${escrowPda.toString()}`);
    console.log(`‚úÖ Revenue Pool PDA: ${revenuePoolPda.toString()}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ IDL —Ñ–∞–π–ª–∞
    console.log("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ IDL —Ñ–∞–π–ª–∞:");
    
    const idlPath = './target/idl/asset_tokenization.json';
    if (fs.existsSync(idlPath)) {
      const idl = JSON.parse(fs.readFileSync(idlPath, 'utf8'));
      console.log("‚úÖ IDL —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω");
      console.log(`   Instructions: ${idl.instructions.length}`);
      console.log(`   Accounts: ${idl.accounts.length}`);
      console.log(`   Errors: ${idl.errors.length}`);
    } else {
      console.log("‚ùå IDL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
      console.log("   –°–æ–∑–¥–∞–π—Ç–µ IDL —Ñ–∞–π–ª:");
      console.log("   anchor idl init --provider.cluster devnet");
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    console.log("\nüéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:");
    
    const readiness = {
      programDeployed: !!programInfo,
      idlExists: fs.existsSync(idlPath),
      pdaGeneration: true,
      configReady: true
    };
    
    const readyCount = Object.values(readiness).filter(Boolean).length;
    const totalCount = Object.keys(readiness).length;
    
    console.log(`‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–ø–ª–æ–µ–Ω–∞: ${readiness.programDeployed ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`‚úÖ IDL —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${readiness.idlExists ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`‚úÖ PDA –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: ${readiness.pdaGeneration ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞: ${readiness.configReady ? '–î–∞' : '–ù–µ—Ç'}`);
    
    console.log(`\nüìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${readyCount}/${totalCount} (${Math.round(readyCount/totalCount*100)}%)`);
    
    if (readyCount === totalCount) {
      console.log("\nüéâ –ü–†–û–ì–†–ê–ú–ú–ê –ì–û–¢–û–í–ê –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò!");
      console.log("   Frontend/Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É");
    } else {
      console.log("\n‚ö†Ô∏è –ù–£–ñ–ù–û –î–û–†–ê–ë–û–¢–ê–¢–¨:");
      if (!readiness.programDeployed) {
        console.log("   - –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã");
      }
      if (!readiness.idlExists) {
        console.log("   - –°–æ–∑–¥–∞—Ç—å IDL —Ñ–∞–π–ª");
      }
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testDeployment();
