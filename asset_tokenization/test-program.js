const anchor = require("@coral-xyz/anchor");
const { PublicKey, Keypair } = require("@solana/web3.js");

async function testProgram() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Asset Tokenization Program");
  console.log("==========================================");

  // Program ID
  const programId = new PublicKey("FuAVoPCtaJWnJZVxE2ii4CtiqPwgvmxLE7gkGv5udmjQ");
  
  console.log(`Program ID: ${programId.toString()}`);
  console.log();

  // Test parameters
  const assetId = 12345;
  const metadataUri = "https://example.com/metadata.json";
  const totalSupply = 1000000;
  const mintAmount = 100000;
  const buyAmount = 50000;
  const revenueAmount = 1000;

  console.log("üìã –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:");
  console.log(`Asset ID: ${assetId}`);
  console.log(`Metadata URI: ${metadataUri}`);
  console.log(`Total Supply: ${totalSupply}`);
  console.log(`Mint Amount: ${mintAmount}`);
  console.log(`Buy Amount: ${buyAmount}`);
  console.log(`Revenue Amount: ${revenueAmount}`);
  console.log();

  // Derive PDAs
  const [assetPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("asset"), Buffer.from(assetId.toString().padStart(16, '0'), 'hex')],
    programId
  );

  const [escrowPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("escrow"), assetPda.toBytes()],
    programId
  );

  const [revenuePoolPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("revenue_pool"), assetPda.toBytes()],
    programId
  );

  console.log("üîç PDA –ê–¥—Ä–µ—Å–∞:");
  console.log(`Asset PDA: ${assetPda.toString()}`);
  console.log(`Escrow PDA: ${escrowPda.toString()}`);
  console.log(`Revenue Pool PDA: ${revenuePoolPda.toString()}`);
  console.log();

  // Test account creation
  const creator = Keypair.generate();
  const buyer = Keypair.generate();
  
  console.log("üë• –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:");
  console.log(`Creator: ${creator.publicKey.toString()}`);
  console.log(`Buyer: ${buyer.publicKey.toString()}`);
  console.log();

  // Test instruction data
  console.log("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:");
  console.log("1. create_asset(asset_id, metadata_uri, total_supply)");
  console.log("2. mint_fraction_tokens(amount)");
  console.log("3. buy_fractions(amount)");
  console.log("4. distribute_revenue(amount)");
  console.log();

  // Test error handling
  console.log("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:");
  console.log("- InsufficientSupply: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–ø—É—Å–∫–∞");
  console.log("- InsufficientTokenBalance: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Å–∫—Ä–æ—É");
  console.log("- InvalidAmount: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞");
  console.log("- Unauthorized: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø");
  console.log();

  console.log("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
  console.log("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –¥–µ–ø–ª–æ–π –Ω–∞ devnet");
  console.log("üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: anchor deploy --provider.cluster devnet");
}

testProgram().catch(console.error);
